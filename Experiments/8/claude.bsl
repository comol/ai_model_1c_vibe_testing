///////////////////////////////////////////////////////////////////////////////////////////////////////
// Универсальный код выгрузки справочника Номенклатура в XML файл
// Можно использовать в модуле менеджера, общем модуле или внешней обработке
//
// Пример использования:
// ВыгрузитьСправочникНоменклатураВXML("C:\Temp\Номенклатура.xml");
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

// Основная процедура выгрузки справочника Номенклатура
//
// Параметры:
//  ПутьКФайлу - Строка - полный путь к файлу для сохранения выгрузки
//
Процедура ВыгрузитьСправочникНоменклатураВXML(ПутьКФайлу) Экспорт
	
	// Проверяем доступность справочника
	Попытка
		МетаданныеСправочника = Метаданные.Справочники.Номенклатура;
	Исключение
		ВызватьИсключение "Справочник Номенклатура не найден в конфигурации!";
	КонецПопытки;
	
	// Создаем объект записи XML
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКФайлу, "UTF-8");
	
	// Записываем заголовок XML
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("ВыгрузкаСправочникаНоменклатура");
	ЗаписьXML.ЗаписатьАтрибут("ДатаВыгрузки", XMLСтрока(ТекущаяДата()));
	ЗаписьXML.ЗаписатьАтрибут("ВерсияФормата", "1.0");
	ЗаписьXML.ЗаписатьАтрибут("ИмяКонфигурации", Метаданные.Имя);
	ЗаписьXML.ЗаписатьАтрибут("ВерсияКонфигурации", Метаданные.Версия);
	
	// Создаем сериализатор
	СериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	
	// Счетчик выгруженных элементов
	КоличествоВыгружено = 0;
	
	// Определяем тип справочника
	ЭтоИерархическийСправочник = МетаданныеСправочника.Иерархический;
	
	// Формируем запрос для получения всех элементов
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура";
	
	// Для иерархического справочника добавляем сортировку по уровню
	Если ЭтоИерархическийСправочник Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура.Уровень,
		|	Номенклатура.Наименование";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура.Наименование";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Выгружаем все элементы
	Пока Выборка.Следующий() Цикл
		
		// Получаем объект справочника
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ТекущийОбъект <> Неопределено Тогда
			
			// Записываем элемент
			ЗаписьXML.ЗаписатьНачалоЭлемента("Элемент");
			
			// Записываем ключевые атрибуты
			ЗаписьXML.ЗаписатьАтрибут("УникальныйИдентификатор", XMLСтрока(ТекущийОбъект.Ссылка.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьАтрибут("Код", XMLСтрока(ТекущийОбъект.Код));
			ЗаписьXML.ЗаписатьАтрибут("Наименование", XMLСтрока(ТекущийОбъект.Наименование));
			
			Если ЭтоИерархическийСправочник Тогда
				ЗаписьXML.ЗаписатьАтрибут("ЭтоГруппа", XMLСтрока(ТекущийОбъект.ЭтоГруппа));
			КонецЕсли;
			
			// Записываем сам объект через сериализатор
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ТекущийОбъект, "ДанныеЭлемента", 
				НазначениеТипаXML.Явное);
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // Элемент
			
			КоличествоВыгружено = КоличествоВыгружено + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Записываем итоговую информацию
	ЗаписьXML.ЗаписатьНачалоЭлемента("ИтогоВыгрузки");
	ЗаписьXML.ЗаписатьАтрибут("КоличествоЭлементов", XMLСтрока(КоличествоВыгружено));
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ИтогоВыгрузки
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ВыгрузкаСправочникаНоменклатура
	ЗаписьXML.Закрыть();
	
	// Выводим сообщение о результате
	Сообщить("Выгрузка справочника Номенклатура завершена.");
	Сообщить("Выгружено элементов: " + КоличествоВыгружено);
	Сообщить("Файл сохранен: " + ПутьКФайлу);
	
КонецПроцедуры

// Процедура загрузки справочника Номенклатура из XML файла
//
// Параметры:
//  ПутьКФайлу - Строка - полный путь к файлу с выгрузкой
//
Процедура ЗагрузитьСправочникНоменклатураИзXML(ПутьКФайлу) Экспорт
	
	// Проверяем существование файла
	Файл = Новый Файл(ПутьКФайлу);
	Если НЕ Файл.Существует() Тогда
		ВызватьИсключение "Файл не найден: " + ПутьКФайлу;
	КонецЕсли;
	
	// Открываем файл для чтения
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	
	// Создаем сериализатор
	СериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	
	КоличествоЗагружено = 0;
	КоличествоОшибок = 0;
	
	// Соответствие для связи старых и новых ссылок
	СоответствиеСсылок = Новый Соответствие;
	
	// Массив для отложенной обработки иерархии
	ОтложенныеЭлементы = Новый Массив;
	
	// Читаем XML
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Элемент" Тогда
			
			// Читаем атрибуты
			УникальныйИдентификатор = ЧтениеXML.ЗначениеАтрибута("УникальныйИдентификатор");
			Код = ЧтениеXML.ЗначениеАтрибута("Код");
			Наименование = ЧтениеXML.ЗначениеАтрибута("Наименование");
			
			ЧтениеXML.Прочитать(); // Переходим к следующему узлу
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ДанныеЭлемента" Тогда
				
				Попытка
					// Читаем объект через сериализатор
					ПрочитанныйОбъект = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("СправочникОбъект.Номенклатура"));
					
					Если ПрочитанныйОбъект <> Неопределено Тогда
						
						// Сохраняем для отложенной обработки
						СтруктураЭлемента = Новый Структура;
						СтруктураЭлемента.Вставить("ПрочитанныйОбъект", ПрочитанныйОбъект);
						СтруктураЭлемента.Вставить("СтараяСсылка", ПрочитанныйОбъект.Ссылка);
						СтруктураЭлемента.Вставить("Код", Код);
						СтруктураЭлемента.Вставить("Наименование", Наименование);
						
						ОтложенныеЭлементы.Добавить(СтруктураЭлемента);
						
					КонецЕсли;
					
				Исключение
					КоличествоОшибок = КоличествоОшибок + 1;
					Сообщить("Ошибка при чтении элемента: " + ОписаниеОшибки());
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	// Обрабатываем элементы с учетом иерархии
	Для Каждого СтруктураЭлемента Из ОтложенныеЭлементы Цикл
		
		Попытка
			ПрочитанныйОбъект = СтруктураЭлемента.ПрочитанныйОбъект;
			
			// Создаем новый объект
			НовыйОбъект = Справочники.Номенклатура.СоздатьЭлемент();
			Если ПрочитанныйОбъект.ЭтоГруппа Тогда
				НовыйОбъект = Справочники.Номенклатура.СоздатьГруппу();
			КонецЕсли;
			
			// Копируем все реквизиты
			ЗаполнитьЗначенияСвойств(НовыйОбъект, ПрочитанныйОбъект, , "Ссылка,Родитель,Владелец");
			
			// Обрабатываем родителя для иерархических справочников
			Если ПрочитанныйОбъект.Родитель <> Справочники.Номенклатура.ПустаяСсылка() Тогда
				НоваяСсылкаРодителя = СоответствиеСсылок.Получить(ПрочитанныйОбъект.Родитель);
				Если НоваяСсылкаРодителя <> Неопределено Тогда
					НовыйОбъект.Родитель = НоваяСсылкаРодителя;
				КонецЕсли;
			КонецЕсли;
			
			// Копируем табличные части
			Для Каждого ТабличнаяЧасть Из Метаданные.Справочники.Номенклатура.ТабличныеЧасти Цикл
				НовыйОбъект[ТабличнаяЧасть.Имя].Загрузить(ПрочитанныйОбъект[ТабличнаяЧасть.Имя].Выгрузить());
			КонецЦикла;
			
			// Записываем объект
			НовыйОбъект.Записать();
			
			// Сохраняем соответствие старой и новой ссылки
			СоответствиеСсылок.Вставить(СтруктураЭлемента.СтараяСсылка, НовыйОбъект.Ссылка);
			
			КоличествоЗагружено = КоличествоЗагружено + 1;
			
		Исключение
			КоличествоОшибок = КоличествоОшибок + 1;
			Сообщить("Ошибка при создании элемента '" + СтруктураЭлемента.Наименование + "': " + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
	// Выводим результаты
	Сообщить("Загрузка справочника Номенклатура завершена.");
	Сообщить("Загружено элементов: " + КоличествоЗагружено);
	Если КоличествоОшибок > 0 Тогда
		Сообщить("Количество ошибок: " + КоличествоОшибок);
	КонецЕсли;
	
КонецПроцедуры